<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Enrique-Blog Space</title>
    <link>https://Enriqueliu.github.io/blog/</link>
    <description>Recent content in Posts on Enrique-Blog Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright @ 2020-2020, Enrique Liu and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 09 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://Enriqueliu.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DataBase System Concept相关语句 (笔记)</title>
      <link>https://Enriqueliu.github.io/blog/blog5/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Enriqueliu.github.io/blog/blog5/</guid>
      <description>表的创建 create table classroom(building varchar (15),room_number varchar (7),capacity numeric (4,0),primary key(building, room_number));create table department(dept_name varchar (20),building varchar (15),budget numeric (12,2) check (budget &amp;gt; 0),primary key (dept_name));create table course(course_id varchar(7),title varchar(50),dept_name varchar(20),credits numeric(2,0) check(credits &amp;gt; 0),primary key (course_id),foreign key (dept_name) references department(dept_name) on delete set null);create table instructor(ID varchar (5),name varchar (20) not null,dept_name varchar (20),salary numeric (8,2) check (salary &amp;gt; 29000),primary key (ID),foreign key (dept_name) references department(dept_name) on delete set null);create table section(course_id varchar (8),sec_id varchar (8),semester varchar (6) check (semester in(&#39;Fall&#39;, &#39;Winter&#39;, &#39;Spring&#39;, &#39;Summer&#39;)),year numeric (4,0) check (year &amp;gt; 1701 and year &amp;lt; 2100),building varchar (15),room_number varchar (7),time_slot_id varchar (4),primary key (course_id,sec_id,semester,year),foreign key (course_id) references course(course_id) on delete cascade,foreign key (building, room_number) references classroom(building, room_number) on delete set null);create table teaches(ID varchar (5),course_id varchar (8),sec_id varchar (8),semester varchar (6),year numeric (4,0),primary key (ID, course_id, sec_id, semester, year),foreign key (course_id, sec_id, semester, year) references section(course_id, sec_id, semester, year) on delete cascade,foreign key (ID) references instructor(ID) on delete cascade);create table student(ID varchar (5),name varchar (20) not null,dept_name varchar (20),tot_cred numeric (3,0) check (tot_cred &amp;gt;= 0),primary key (ID),foreign key (dept_name) references department(dept_name) on delete set null);create table takes(ID varchar (5),course_id varchar (8),sec_id varchar (8),semester varchar (6),year numeric (4,0),grade varchar (2),primary key (ID, course_id, sec_id, semester, year),foreign key (course_id, sec_id, semester, year) references section(course_id, sec_id, semester, year) on delete cascade,foreign key (ID) references student(ID) on delete cascade);create table advisor(s_ID varchar (5),i_ID varchar (5),primary key (s_ID),foreign key (i_ID) references instructor (ID)on delete set null,foreign key (s_ID) references student (ID) on delete cascade);create table prereq(course_id varchar(8),prereq_id varchar(8),primary key (course_id, prereq_id),foreign key (course_id) references course(course_id) on delete cascade,foreign key (prereq_id) references course(course_id));create table timeslot(time_slot_id varchar (4),day varchar (1) check (day in (&#39;M&#39;, &#39;T&#39;, &#39;W&#39;, &#39;R&#39;, &#39;F&#39;, &#39;S&#39;, &#39;U&#39;)),start_time time,end_time time,primary key (time_slot_id, day, start_time));create table timeslot(time_slot_id varchar (4),day varchar (1),start_hr numeric (2) check (start_hr &amp;gt;= 0 and start_hr &amp;lt; 24),start_min numeric (2) check (start_min &amp;gt;= 0 and start_min &amp;lt; 60),end_hr numeric (2) check (end_hr &amp;gt;= 0 and end_hr &amp;lt; 24),end_min numeric (2) check (end_min &amp;gt;= 0 and end_min &amp;lt; 60),primary key (time_slot_id, day, start_hr, start_min));样本数据 insert into classroom values(&amp;quot;Packard&amp;quot;,101,500),(&amp;quot;Painter&amp;quot;,514,10),(&amp;quot;Taylor&amp;quot;,3128,70),(&amp;quot;Waston&amp;quot;,100,30),(&amp;quot;Watson&amp;quot;,120,50);insert into department values(&amp;quot;Biology&amp;quot;,&amp;quot;Waston&amp;quot;,90000),(&amp;quot;Comp.</description>
    </item>
    
    <item>
      <title>基于Hugo搭建的个人博客</title>
      <link>https://Enriqueliu.github.io/blog/blog2/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Enriqueliu.github.io/blog/blog2/</guid>
      <description>Hugo下载安装 由于github中下载的地址比较慢, 微云分享 hugo_0.69.2_Windows-64bit 下载后解压将 hugo.exe 的目录添加到环境变量 检查是否安装——》打开powershell——》输入 hugo version
搭建博客 生成site目录 打开powershell
hugo new site myblog此时会生成
└─myblog├─archetypes├─content├─data├─layouts├─static└─themesconfig.toml 是配置文件，自定义博客标题、地址等
选择主题 前往 themes.gohugo.io 挑选自己喜欢的主题，下载后放到目录 themes/ 将主题中的配置文件 config.toml 替换 myblog 目录的 config.toml。倘若想省心的话把 exampleSite 目录下的全部文件复制到 myblog 目录下
本地测试 hugo sever
浏览器输入这个地址进行访问
写一篇博客 文章在 content\blog 目录下新建一个.md文档进行编写，需学习markdown的写法
部署github 创建仓库 仓库命名按照 &amp;lt;username&amp;gt;.github.io，不然会无法访问（404警告）
生成public目录 hugo --baseUrl=&amp;quot;https://username.github.io&amp;quot; 打开public目录，将public下的文件推送到远程仓库
git initgit add .git commit -m &amp;quot;first commit&amp;quot;git remote add origin &amp;lt;仓库http&amp;gt; git push -u origin master远程访问 https://username.</description>
    </item>
    
    <item>
      <title>git命令</title>
      <link>https://Enriqueliu.github.io/blog/blog1/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Enriqueliu.github.io/blog/blog1/</guid>
      <description>工作区  一个你存放代码的目录相当于一个工作区  版本库  在你的工作区中创建一个新仓库 git init  将文件添加到暂存区（stage） git add &amp;lt;file&amp;gt; 将所有文件添加到暂存区（stage） git add . 提交到HEAD git commit -m &amp;quot;代码提交信息&amp;quot; 添加远程仓库地址 git remote add origin &amp;lt;url&amp;gt; 提交到远程仓库，master是你要推送的分支 git push origin master 若出现此类错误  ! [rejected] master -&amp;gt; master (fetch first) error: failed to push some refs to &#39;https://github.com/.../.git&#39; hint: Updates were rejected because the remote contains work that you do hint: not have locally. This is usually caused by another repository pushing hint: to the same ref.</description>
    </item>
    
    <item>
      <title>DBeaver连接MySQL 8以上版本以及解决可能遇到的问题</title>
      <link>https://Enriqueliu.github.io/blog/blog4/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Enriqueliu.github.io/blog/blog4/</guid>
      <description>前期准备 数据库MySQL版本8.0.18
下载一个DBeaver.exe
下载地址：https://dbeaver.io/download/
DBeaver连接MySQL 点击新建 &amp;ndash;》数据库连接 &amp;ndash;》下一步
选择数据库 &amp;ndash;》下一步 &amp;ndash;》完成
双击新建的文件会提示下面这样的错误
解决方案 原因是数据库的时区配置不对 打开cmd以管理员运行 登录数据库 &amp;ndash;》输入 show variables like &amp;lsquo;%time_zone%&#39;;
SYSTEM为默认美国时间，解决方法：输入 set global time_zone=&#39;+8:00&amp;rsquo;;
虽然显示还是SYSTEM，退出数据库重启一遍即可
然后返回到DBeaver再次双击连接
红色框表示连接成功</description>
    </item>
    
    <item>
      <title>排队抓娃娃</title>
      <link>https://Enriqueliu.github.io/blog/blog3/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Enriqueliu.github.io/blog/blog3/</guid>
      <description>问题描述： 排队抓娃娃，每个人抓到一个娃娃后离开，设每个人抓娃娃所花时间为time，每个人等待的时间为第i~i-1所用时间，第一个人等待的时间为0。如果等待的时间超过抓到娃娃的所用时间，则这个人不开心。
给定一个序列为每个人抓到娃娃的所用时间，求如何排列，使得不开心人数最少。
输入第一行n个人，输入第二行每个人所用时间
input： 4
1 2 3 5
output： 1
参考代码如下： #include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;using namespace std;int NoHappy(int num[], int n){int* cost;int* wait;cost = new int[n];wait = new int[n];int count = 1; //统计最大开心人数 sort(num, num+n);for(int i = 0; i &amp;lt; n; i++){if(i == 0){ cost[i] = num[i];wait[i] = 0; }else{wait[i] = wait[i-1] + cost[i-1];for(int j = i; j &amp;lt; n; j++){ if((num[j] - wait[i]) &amp;gt;= 0){cost[i] = num[j];count++;break;}} }} int unhappy = n - count;return unhappy;}int main(){int n, precost;cin &amp;gt;&amp;gt; n;int* cost;cost = new int[n];for(int i = 0; i &amp;lt; n; i++){cin &amp;gt;&amp;gt; cost[i]; }cout &amp;lt;&amp;lt; NoHappy(cost,n);}</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://Enriqueliu.github.io/blog/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Enriqueliu.github.io/blog/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>